use std::collections::HashSet;

static INPUT: &str = "470,705\n331,196\n1241,728\n1034,161\n181,850\n999,484\n480,680\n798,33\n226,86\n475,226\n113,287\n770,702\n47,35\n848,312\n1129,402\n179,326\n766,404\n1258,717\n470,494\n723,434\n418,291\n100,298\n994,316\n423,434\n985,292\n721,261\n528,572\n595,567\n909,665\n411,292\n1056,291\n1051,434\n311,484\n462,312\n187,273\n715,567\n114,819\n634,861\n79,318\n912,344\n1144,845\n152,745\n201,464\n840,185\n291,100\n1084,31\n1255,434\n909,229\n895,827\n557,29\n441,159\n661,193\n826,215\n535,70\n974,767\n254,739\n512,189\n868,75\n1076,9\n700,86\n684,515\n356,422\n348,344\n605,341\n360,586\n383,824\n239,393\n751,12\n253,229\n403,759\n166,273\n1196,819\n406,301\n343,102\n1119,618\n333,892\n711,789\n283,70\n418,603\n380,714\n756,255\n20,375\n1145,794\n642,180\n1140,273\n984,451\n763,619\n196,427\n869,159\n460,96\n35,548\n512,709\n1231,318\n1163,21\n465,275\n32,187\n212,296\n718,835\n1036,42\n1002,672\n108,492\n321,892\n294,0\n252,350\n377,733\n1196,822\n316,344\n254,519\n1168,49\n1158,745\n142,49\n130,504\n397,56\n718,186\n463,170\n482,463\n1032,752\n649,193\n512,158\n895,501\n1150,122\n537,833\n915,434\n790,262\n1058,539\n764,44\n512,861\n493,296\n472,422\n44,86\n1101,592\n671,276\n977,2\n822,621\n179,668\n415,46\n1067,154\n895,169\n475,728\n231,434\n156,103\n1176,72\n113,607\n301,851\n927,824\n346,870\n892,603\n610,86\n1114,19\n295,353\n402,350\n1118,145\n201,318\n681,732\n338,792\n855,733\n202,364\n125,430\n1140,285\n917,309\n1309,542\n10,540\n246,499\n1038,178\n209,609\n242,16\n10,214\n20,519\n276,173\n540,520\n192,582\n681,891\n830,680\n600,44\n895,848\n1009,219\n425,442\n1049,185\n994,166\n1034,733\n453,240\n605,833\n154,71\n141,607\n840,494\n131,87\n1084,86\n1193,592\n1163,166\n847,724\n329,318\n567,46\n850,798\n554,255\n817,598\n723,658\n1027,70\n1154,103\n822,273\n704,290\n985,72\n386,593\n1015,353\n907,435\n867,847\n711,835\n415,718\n903,343\n252,539\n574,310\n295,801\n156,733\n1173,395\n736,218\n700,360\n865,144\n1044,240\n708,628\n354,262\n1298,42\n987,250\n857,430\n184,185\n1066,14\n130,894\n917,585\n882,596\n156,791\n868,296\n1248,29\n1300,354\n1180,504\n542,385\n710,850\n172,407\n1064,310\n962,166\n458,504\n992,295\n517,667\n95,12\n484,299\n523,390\n865,733\n326,82\n1300,91\n69,728\n470,548\n1015,541\n141,735\n278,756\n1237,140\n642,714\n728,71\n1064,666\n1128,477\n301,403\n677,159\n340,266\n984,812\n972,792\n212,374\n828,463\n987,810\n1109,318\n212,178\n1275,548\n1016,894\n962,128\n840,548\n10,149\n933,833\n80,411\n1136,883\n676,766\n421,632\n242,786\n131,721\n274,189\n407,576\n80,35\n393,361\n425,421\n184,397\n1101,196\n1154,411\n529,878\n711,518\n1223,270\n579,459\n343,838\n428,415\n933,733\n930,628\n55,294\n1226,336\n378,721\n435,553\n546,492\n1019,100\n763,684\n1076,885\n1150,772\n276,876\n574,51\n25,610\n117,644\n410,563\n311,838\n192,817\n626,696\n1309,352\n604,18\n1036,705\n782,124\n338,464\n502,774\n1243,882\n950,756\n1232,593\n25,284\n853,173\n1295,614\n1144,534\n44,534\n1118,312\n954,515\n410,747\n806,348\n1193,644\n1248,59\n700,836\n247,318\n1121,739\n681,715\n1185,430\n759,103\n459,504\n981,292\n1131,668\n798,64\n728,39\n251,435\n688,187\n326,451\n828,351\n654,869\n723,712\n1300,680\n442,598\n1310,645\n688,222\n994,344\n277,833\n309,318\n26,184\n711,387\n418,515\n1109,436\n274,705\n1131,813\n618,614\n229,298\n388,128\n411,366\n125,464\n3,362\n131,173\n1216,772\n830,540\n572,115\n922,576\n830,214\n520,184\n895,718\n808,203\n443,847\n729,453\n781,240\n1078,794\n1282,144\n196,390\n502,203\n992,711\n557,588\n934,828\n1010,632\n212,520\n174,11\n976,630\n1066,147\n913,822\n731,459\n213,93\n244,270\n306,791\n254,155\n103,103\n671,52\n1128,271\n1010,262\n62,708\n412,556\n5,193\n294,446\n828,95\n201,458\n838,271\n47,859\n314,628\n425,473\n571,654\n994,540\n567,841\n236,575\n141,287\n197,621\n480,206\n868,534\n435,822\n62,59\n363,346\n1056,739\n201,10\n994,680\n907,135\n974,743\n1168,64\n380,180\n247,103\n1225,747\n841,287\n79,352\n295,161\n393,306\n864,646\n1158,149\n348,128\n348,469\n189,739\n199,285\n318,711\n888,794\n1109,458\n1068,108\n463,724\n397,822\n1255,294\n917,185\n272,716\n706,466\n979,644\n887,460\n1053,838\n1131,226\n1173,787\n979,196\n557,865\n441,735\n1290,519\n1044,576\n1222,854\n989,165\n107,723\n1238,155\n67,460\n1238,71\n1213,726\n443,47\n316,166\n711,105\n498,273\n70,102\n65,585\n475,442\n599,789\n32,873\n1012,379\n623,609\n10,91\n569,147\n1067,814\n580,798\n321,2\n209,196\n967,410\n1230,411\n1282,870\n731,87\n736,859\n294,894\n546,402\n334,630\n559,12\n651,196\n65,261\n1149,598\n473,492\n393,452\n629,491\n480,763\n1202,44\n1261,61\n1056,519\n992,127\n972,430\n740,562\n344,290\n882,479\n45,644\n1193,302\n1113,273\n58,525\n718,865\n400,515\n1084,479\n1074,603\n835,450\n316,728\n480,373\n1154,733\n892,575\n1097,129\n353,59\n1136,688\n1128,422\n547,619\n587,182\n962,344\n622,707\n626,198\n1154,483\n75,135\n277,161\n894,406\n278,534\n951,609\n711,152\n70,550\n738,432\n907,759\n882,534\n923,327\n933,229\n383,294\n25,3\n1009,851\n507,614\n174,883\n295,129\n276,428\n446,86\n318,767\n703,859\n1094,710\n480,688\n1184,124\n336,127\n923,567\n790,184\n1285,284\n152,579\n599,742\n1197,287\n639,500\n467,273\n785,495\n300,262\n855,285\n277,285\n267,567\n403,459\n1179,56\n1029,801\n551,103\n1289,159\n415,515\n97,596\n1109,884\n885,227\n166,534\n213,129\n927,70\n472,623\n1113,49\n480,354\n166,397\n1034,721\n629,610\n376,590\n442,411\n676,861\n1230,859\n1068,878\n278,590\n49,161\n899,528\n759,791\n1071,169\n1230,758\n1032,380\n271,387\n974,711\n0,197\n70,400\n806,856\n987,698\n1038,380\n395,460\n793,107\n376,828\n405,152\n78,301\n256,550\n1113,497\n892,274\n853,721\n783,865\n397,166\n579,87\n243,154\n454,280\n999,500\n898,502\n55,600\n621,161\n786,894\n1144,808\n192,134\n1126,285\n196,245\n1290,833\n1223,501\n847,276\n835,452\n1228,523\n653,542\n413,250\n1200,490\n278,304\n813,365\n582,855\n633,735\n520,710\n398,344\n1145,122\n740,332\n1131,529\n544,180\n1039,61\n363,548\n981,740\n830,521\n674,865\n736,676\n300,632\n671,170\n572,299\n185,607\n907,459\n1196,72\n687,285\n196,19\n55,434\n999,813\n288,754\n446,646\n981,154\n587,460\n323,810\n1126,497\n110,714\n512,326\n830,354\n1232,301\n266,240\n172,487\n1208,152\n618,280\n766,714\n721,633\n316,680\n987,523\n147,614\n672,380\n467,173\n253,665\n840,189\n673,878\n944,754\n278,75\n1163,813\n927,294\n1310,197\n1183,865\n47,488\n152,315\n472,477\n770,371\n388,766\n108,44\n863,294\n629,715\n1043,775\n924,593\n1179,838\n703,655\n1213,596\n985,766\n830,11\n1031,721\n623,285\n130,448\n380,628\n72,739\n84,749\n977,729\n318,183\n229,227\n687,733\n179,564\n415,270\n606,138\n1274,280\n295,541\n1054,550\n610,836\n239,583\n524,894\n383,600\n1102,808\n830,883\n828,543\n686,845\n252,544\n832,490\n1109,10\n1009,267\n869,765\n822,360\n928,716\n1118,817\n1063,103\n10,680\n497,813\n295,609\n1230,310\n1042,145\n1144,397\n70,494\n226,31\n378,466\n401,441\n592,29\n257,838\n366,754\n174,540\n1253,49\n78,593\n903,576\n764,828\n382,716\n793,499\n1063,576\n316,878\n1128,417\n1298,266\n520,262\n10,354\n388,576\n403,435\n393,451\n626,750\n610,58\n279,721\n358,574\n239,400\n1010,184\n1253,845\n415,67\n867,47\n1032,75\n1156,519\n254,827\n582,603\n360,696\n1071,311\n246,666\n353,851\n838,477\n320,182\n835,220\n1282,24\n200,280\n57,845\n504,856\n741,182\n242,430\n291,794\n\nfold along x=655\nfold along y=447\nfold along x=327\nfold along y=223\nfold along x=163\nfold along y=111\nfold along x=81\nfold along y=55\nfold along x=40\nfold along y=27\nfold along y=13\nfold along y=6";

fn fold(grid: &mut HashSet<(usize, usize)>, xy: char, point: usize) {
    let mut to_insert = HashSet::new();
    let mut to_remove = HashSet::new();
    for &(x, y) in grid.iter() {
        if xy == 'x' && x > point {
            to_insert.insert((2 * point - x, y));
            to_remove.insert((x, y));
        } else if xy == 'y' && y > point {
            to_insert.insert((x, 2 * point - y));
            to_remove.insert((x, y));
        }
    }
    for coord in to_insert {
        grid.insert(coord);
    }
    for coord in to_remove {
        grid.remove(&coord);
    }
}

fn print_grid(grid: &HashSet<(usize, usize)>) {
    let (x_min, x_max, y_min, y_max) = grid.iter().fold(
        (usize::MAX, usize::MIN, usize::MAX, usize::MIN),
        |(x_min, x_max, y_min, y_max), &(x, y)| {
            (x_min.min(x), x_max.max(x), y_min.min(y), y_max.max(y))
        },
    );
    for y in y_min..=y_max {
        for x in x_min..=x_max {
            let c = if grid.contains(&(x, y)) { "#" } else { "." };
            print!("{}", c);
        }
        println!();
    }
}

fn main() {
    let mut grid = HashSet::new();
    let mut part1 = true;
    INPUT
        .lines()
        .filter(|line| !line.is_empty())
        .for_each(|line| {
            if let Some(fold_str) = line.strip_prefix("fold along ") {
                let (xy, point): (char, usize) = fold_str
                    .split_once('=')
                    .map(|(xy, point)| (xy.chars().next().unwrap(), point.parse().unwrap()))
                    .unwrap();
                fold(&mut grid, xy, point);
                if part1 {
                    println!("Part one: {}", grid.len());
                    part1 = false;
                }
            } else {
                let coord: (usize, usize) = line
                    .split_once(',')
                    .map(|(x, y)| (x.parse().unwrap(), y.parse().unwrap()))
                    .unwrap();
                grid.insert(coord);
            }
        });
    println!("Part two:");
    print_grid(&grid);
}
