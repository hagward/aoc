static INPUT: &'static str = "1,2,5,1,1,4,1,5,5,5,3,4,1,2,2,5,3,5,1,3,4,1,5,2,5,1,4,1,2,2,1,5,1,1,1,2,4,3,4,2,2,4,5,4,1,2,3,5,3,4,1,1,2,2,1,3,3,2,3,2,1,2,2,3,1,1,2,5,1,2,1,1,3,1,1,5,5,4,1,1,5,1,4,3,5,1,3,3,1,1,5,2,1,2,4,4,5,5,4,4,5,4,3,5,5,1,3,5,2,4,1,1,2,2,2,4,1,2,1,5,1,3,1,1,1,2,1,2,2,1,3,3,5,3,4,2,1,5,2,1,4,1,1,5,1,1,5,4,4,1,4,2,3,5,2,5,5,2,2,4,4,1,1,1,4,4,1,3,5,4,2,5,5,4,4,2,2,3,2,1,3,4,1,5,1,4,5,2,4,5,1,3,4,1,4,3,3,1,1,3,2,1,5,5,3,1,1,2,4,5,3,1,1,1,2,5,2,4,5,1,3,2,4,5,5,1,2,3,4,4,1,4,1,1,3,3,5,1,2,5,1,2,5,4,1,1,3,2,1,1,1,3,5,1,3,2,4,3,5,4,1,1,5,3,4,2,3,1,1,4,2,1,2,2,1,1,4,3,1,1,3,5,2,1,3,2,1,1,1,2,1,1,5,1,1,2,5,1,1,4";

fn simulate_fish(fish: &[usize], num_iterations: usize) -> u64 {
    let mut num_fish: Vec<u64> = vec![0; 10];
    for &f in fish {
        num_fish[f] += 1;
    }
    for _ in 0..num_iterations {
        num_fish[9] = num_fish[0];
        for i in 0..(num_fish.len() - 1) {
            num_fish[i] = num_fish[i + 1];
        }
        num_fish[6] += num_fish[9];
    }
    num_fish.iter().sum::<u64>() - num_fish[9]
}

fn main() {
    let fish: Vec<_> = INPUT.split(',').map(|x| x.parse().unwrap()).collect();
    println!("Part one: {}", simulate_fish(&fish, 80));
    println!("Part two: {}", simulate_fish(&fish, 256));
}
